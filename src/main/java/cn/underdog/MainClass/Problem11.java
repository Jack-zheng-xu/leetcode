package cn.underdog.MainClass;

/**
 * 给你两个整数 a 和 b ，不使用 运算符 + 和 - ​​​​​​​，计算并返回两整数之和。
 *
 * 左移代表乘，左移一位代表乘2,左移两位代表乘4，依次递增           12<<1=24    12<<2=48
 *
 * 右移代表除, 右移一位代表除2,右移两位代表除4，依次递增           12>>1=6     12>>2=3
 * & 与
 * ~ 非
 * | 或
 * ^ 异或
 *在计算机内，定点数有3种表示法：原码、反码和补码。
 *   原码：最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。
 *   反码：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。
 *   补码：正数的补码与其原码相同；负数的补码是在其反码的末位加1。
 *
 *   正数（符号位为0）：原码，反码，补码均一致
 *   负数（符号位为1）：
 *      原码：二进制表示
 *      反码：符号位不变，其余取反
 *      补码：反码+1
 *
 *
 *异或运算符是指：
 *   参与运算的两个值，如果两个相应位相同，则结果为0，否则为1。即：0^0=0， 1^0=1， 0^1=1， 1^1=0
 *   用异或改变两个值
 *
 *   异或运算的特性：
 *         1.为进位加法
 *         2.A^A = 0;
 *         3.A^0  = A;
 *
 *
 */
public class Problem11 {
    public static void main(String[] args) {
        getSum(2,3);
    }

    public static int getSum(int a, int b) {
        while (b != 0) {
            int carry = (a & b) << 1;  // 代表 a+b 的进位
            a = a ^ b; // 无进位加法
            b = carry;
        }
        return a;

    }
}
